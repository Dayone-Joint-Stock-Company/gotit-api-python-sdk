# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from gotit_api_python_sdk.models.vouchercheckresponse import VOUCHERCHECKRESPONSE

from gotit_api_python_sdk.api_client import ApiClient, RequestSerialized
from gotit_api_python_sdk.api_response import ApiResponse
from gotit_api_python_sdk.rest import RESTResponseType


class VoucherStatusApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def check_voucher(
        self,
        x_gi_authorization: Annotated[StrictStr, Field(description="Authorization")],
        ref_id: Annotated[StrictStr, Field(description="Transaction RefId")],
        is_exclude_store_list_info: Annotated[Optional[StrictBool], Field(description="Exclude store list information")] = None,
        store_list_page: Annotated[Optional[StrictInt], Field(description="Store Page")] = None,
        store_list_page_size: Annotated[Optional[StrictInt], Field(description="Store Page Size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VOUCHERCHECKRESPONSE:
        """Check voucher status

        Check voucher status

        :param x_gi_authorization: Authorization (required)
        :type x_gi_authorization: str
        :param ref_id: Transaction RefId (required)
        :type ref_id: str
        :param is_exclude_store_list_info: Exclude store list information
        :type is_exclude_store_list_info: bool
        :param store_list_page: Store Page
        :type store_list_page: int
        :param store_list_page_size: Store Page Size
        :type store_list_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_voucher_serialize(
            x_gi_authorization=x_gi_authorization,
            ref_id=ref_id,
            is_exclude_store_list_info=is_exclude_store_list_info,
            store_list_page=store_list_page,
            store_list_page_size=store_list_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VOUCHERCHECKRESPONSE",
            '400': "HTTPBADREQUEST",
            '401': "HTTPUNAUTHORIZED",
            '404': "HTTPNOTFOUND",
            '500': "HTTPINTERNALSERVERERROR",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def check_voucher_with_http_info(
        self,
        x_gi_authorization: Annotated[StrictStr, Field(description="Authorization")],
        ref_id: Annotated[StrictStr, Field(description="Transaction RefId")],
        is_exclude_store_list_info: Annotated[Optional[StrictBool], Field(description="Exclude store list information")] = None,
        store_list_page: Annotated[Optional[StrictInt], Field(description="Store Page")] = None,
        store_list_page_size: Annotated[Optional[StrictInt], Field(description="Store Page Size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VOUCHERCHECKRESPONSE]:
        """Check voucher status

        Check voucher status

        :param x_gi_authorization: Authorization (required)
        :type x_gi_authorization: str
        :param ref_id: Transaction RefId (required)
        :type ref_id: str
        :param is_exclude_store_list_info: Exclude store list information
        :type is_exclude_store_list_info: bool
        :param store_list_page: Store Page
        :type store_list_page: int
        :param store_list_page_size: Store Page Size
        :type store_list_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_voucher_serialize(
            x_gi_authorization=x_gi_authorization,
            ref_id=ref_id,
            is_exclude_store_list_info=is_exclude_store_list_info,
            store_list_page=store_list_page,
            store_list_page_size=store_list_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VOUCHERCHECKRESPONSE",
            '400': "HTTPBADREQUEST",
            '401': "HTTPUNAUTHORIZED",
            '404': "HTTPNOTFOUND",
            '500': "HTTPINTERNALSERVERERROR",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def check_voucher_without_preload_content(
        self,
        x_gi_authorization: Annotated[StrictStr, Field(description="Authorization")],
        ref_id: Annotated[StrictStr, Field(description="Transaction RefId")],
        is_exclude_store_list_info: Annotated[Optional[StrictBool], Field(description="Exclude store list information")] = None,
        store_list_page: Annotated[Optional[StrictInt], Field(description="Store Page")] = None,
        store_list_page_size: Annotated[Optional[StrictInt], Field(description="Store Page Size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Check voucher status

        Check voucher status

        :param x_gi_authorization: Authorization (required)
        :type x_gi_authorization: str
        :param ref_id: Transaction RefId (required)
        :type ref_id: str
        :param is_exclude_store_list_info: Exclude store list information
        :type is_exclude_store_list_info: bool
        :param store_list_page: Store Page
        :type store_list_page: int
        :param store_list_page_size: Store Page Size
        :type store_list_page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_voucher_serialize(
            x_gi_authorization=x_gi_authorization,
            ref_id=ref_id,
            is_exclude_store_list_info=is_exclude_store_list_info,
            store_list_page=store_list_page,
            store_list_page_size=store_list_page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VOUCHERCHECKRESPONSE",
            '400': "HTTPBADREQUEST",
            '401': "HTTPUNAUTHORIZED",
            '404': "HTTPNOTFOUND",
            '500': "HTTPINTERNALSERVERERROR",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _check_voucher_serialize(
        self,
        x_gi_authorization,
        ref_id,
        is_exclude_store_list_info,
        store_list_page,
        store_list_page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ref_id is not None:
            _path_params['refId'] = ref_id
        # process the query parameters
        if is_exclude_store_list_info is not None:
            
            _query_params.append(('isExcludeStoreListInfo', is_exclude_store_list_info))
            
        if store_list_page is not None:
            
            _query_params.append(('storeListPage', store_list_page))
            
        if store_list_page_size is not None:
            
            _query_params.append(('storeListPageSize', store_list_page_size))
            
        # process the header parameters
        if x_gi_authorization is not None:
            _header_params['X-GI-Authorization'] = x_gi_authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v4.0/vouchers/multiple/status/{refId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


