# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gotit_api_python_sdk.models.productpriceschema import PRODUCTPRICESCHEMA
from gotit_api_python_sdk.models.storepagingschema import STOREPAGINGSCHEMA
from gotit_api_python_sdk.models.storeproductschema import STOREPRODUCTSCHEMA
from typing import Optional, Set
from typing_extensions import Self

class PRODUCTSVOUCHERCHECK(BaseModel):
    """
    PRODUCTSVOUCHERCHECK
    """ # noqa: E501
    product_id: Optional[StrictInt] = Field(default=None, description="Product Id", alias="productId")
    product_nm: Optional[StrictStr] = Field(default=None, description="Product Name", alias="productNm")
    product_img: Optional[StrictStr] = Field(default=None, description="Link product image", alias="productImg")
    brand_id: Optional[StrictInt] = Field(default=None, description="Brand id", alias="brandId")
    brand_nm: Optional[StrictStr] = Field(default=None, description="Brand name", alias="brandNm")
    brand_service_guide: Optional[StrictStr] = Field(default=None, alias="brandServiceGuide")
    price: Optional[PRODUCTPRICESCHEMA] = None
    product_desc: Optional[StrictStr] = Field(default=None, alias="productDesc")
    terms: Optional[StrictStr] = None
    store_list: Optional[List[STOREPRODUCTSCHEMA]] = Field(default=None, alias="storeList")
    total_store: Optional[StrictInt] = Field(default=None, alias="totalStore")
    store_pagination: Optional[STOREPAGINGSCHEMA] = Field(default=None, alias="storePagination")
    __properties: ClassVar[List[str]] = ["productId", "productNm", "productImg", "brandId", "brandNm", "brandServiceGuide", "price", "productDesc", "terms", "storeList", "totalStore", "storePagination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PRODUCTSVOUCHERCHECK from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in store_list (list)
        _items = []
        if self.store_list:
            for _item_store_list in self.store_list:
                if _item_store_list:
                    _items.append(_item_store_list.to_dict())
            _dict['storeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of store_pagination
        if self.store_pagination:
            _dict['storePagination'] = self.store_pagination.to_dict()
        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if product_nm (nullable) is None
        # and model_fields_set contains the field
        if self.product_nm is None and "product_nm" in self.model_fields_set:
            _dict['productNm'] = None

        # set to None if product_img (nullable) is None
        # and model_fields_set contains the field
        if self.product_img is None and "product_img" in self.model_fields_set:
            _dict['productImg'] = None

        # set to None if brand_id (nullable) is None
        # and model_fields_set contains the field
        if self.brand_id is None and "brand_id" in self.model_fields_set:
            _dict['brandId'] = None

        # set to None if brand_nm (nullable) is None
        # and model_fields_set contains the field
        if self.brand_nm is None and "brand_nm" in self.model_fields_set:
            _dict['brandNm'] = None

        # set to None if brand_service_guide (nullable) is None
        # and model_fields_set contains the field
        if self.brand_service_guide is None and "brand_service_guide" in self.model_fields_set:
            _dict['brandServiceGuide'] = None

        # set to None if product_desc (nullable) is None
        # and model_fields_set contains the field
        if self.product_desc is None and "product_desc" in self.model_fields_set:
            _dict['productDesc'] = None

        # set to None if terms (nullable) is None
        # and model_fields_set contains the field
        if self.terms is None and "terms" in self.model_fields_set:
            _dict['terms'] = None

        # set to None if total_store (nullable) is None
        # and model_fields_set contains the field
        if self.total_store is None and "total_store" in self.model_fields_set:
            _dict['totalStore'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PRODUCTSVOUCHERCHECK from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productId": obj.get("productId"),
            "productNm": obj.get("productNm"),
            "productImg": obj.get("productImg"),
            "brandId": obj.get("brandId"),
            "brandNm": obj.get("brandNm"),
            "brandServiceGuide": obj.get("brandServiceGuide"),
            "price": PRODUCTPRICESCHEMA.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "productDesc": obj.get("productDesc"),
            "terms": obj.get("terms"),
            "storeList": [STOREPRODUCTSCHEMA.from_dict(_item) for _item in obj["storeList"]] if obj.get("storeList") is not None else None,
            "totalStore": obj.get("totalStore"),
            "storePagination": STOREPAGINGSCHEMA.from_dict(obj["storePagination"]) if obj.get("storePagination") is not None else None
        })
        return _obj


