# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BRANDREEDEMSCHEMA(BaseModel):
    """
    BRANDREEDEMSCHEMA
    """ # noqa: E501
    brand_id: Optional[StrictInt] = Field(default=None, description="Brand id", alias="brandID")
    brand_name: Optional[StrictStr] = Field(default=None, description="Brand name", alias="brandName")
    brand_logo: Optional[StrictStr] = Field(default=None, description="Link to brand logo image", alias="brandLogo")
    brand_name_slug: Optional[StrictStr] = Field(default=None, description="Brand name slug", alias="brandNameSlug")
    brand_phone: Optional[StrictStr] = Field(default=None, description="Brand Phone Number", alias="brandPhone")
    brand_address: Optional[StrictStr] = Field(default=None, description="Address of brand", alias="brandAddress")
    brand_desc: Optional[StrictStr] = Field(default=None, description="Brand Description", alias="brandDesc")
    brand_service_guide: Optional[StrictStr] = Field(default=None, description="Describe the brand's terms of reference (T&C). HTML format", alias="brandServiceGuide")
    category_id: Optional[StrictInt] = Field(default=None, description="Category Id", alias="categoryId")
    category_nm: Optional[StrictStr] = Field(default=None, description="Category Name", alias="categoryNm")
    category_img: Optional[StrictStr] = Field(default=None, description="Category Image Logo", alias="categoryImg")
    __properties: ClassVar[List[str]] = ["brandID", "brandName", "brandLogo", "brandNameSlug", "brandPhone", "brandAddress", "brandDesc", "brandServiceGuide", "categoryId", "categoryNm", "categoryImg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BRANDREEDEMSCHEMA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if brand_id (nullable) is None
        # and model_fields_set contains the field
        if self.brand_id is None and "brand_id" in self.model_fields_set:
            _dict['brandID'] = None

        # set to None if brand_name (nullable) is None
        # and model_fields_set contains the field
        if self.brand_name is None and "brand_name" in self.model_fields_set:
            _dict['brandName'] = None

        # set to None if brand_logo (nullable) is None
        # and model_fields_set contains the field
        if self.brand_logo is None and "brand_logo" in self.model_fields_set:
            _dict['brandLogo'] = None

        # set to None if brand_name_slug (nullable) is None
        # and model_fields_set contains the field
        if self.brand_name_slug is None and "brand_name_slug" in self.model_fields_set:
            _dict['brandNameSlug'] = None

        # set to None if brand_phone (nullable) is None
        # and model_fields_set contains the field
        if self.brand_phone is None and "brand_phone" in self.model_fields_set:
            _dict['brandPhone'] = None

        # set to None if brand_address (nullable) is None
        # and model_fields_set contains the field
        if self.brand_address is None and "brand_address" in self.model_fields_set:
            _dict['brandAddress'] = None

        # set to None if brand_desc (nullable) is None
        # and model_fields_set contains the field
        if self.brand_desc is None and "brand_desc" in self.model_fields_set:
            _dict['brandDesc'] = None

        # set to None if brand_service_guide (nullable) is None
        # and model_fields_set contains the field
        if self.brand_service_guide is None and "brand_service_guide" in self.model_fields_set:
            _dict['brandServiceGuide'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if category_nm (nullable) is None
        # and model_fields_set contains the field
        if self.category_nm is None and "category_nm" in self.model_fields_set:
            _dict['categoryNm'] = None

        # set to None if category_img (nullable) is None
        # and model_fields_set contains the field
        if self.category_img is None and "category_img" in self.model_fields_set:
            _dict['categoryImg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BRANDREEDEMSCHEMA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandID": obj.get("brandID"),
            "brandName": obj.get("brandName"),
            "brandLogo": obj.get("brandLogo"),
            "brandNameSlug": obj.get("brandNameSlug"),
            "brandPhone": obj.get("brandPhone"),
            "brandAddress": obj.get("brandAddress"),
            "brandDesc": obj.get("brandDesc"),
            "brandServiceGuide": obj.get("brandServiceGuide"),
            "categoryId": obj.get("categoryId"),
            "categoryNm": obj.get("categoryNm"),
            "categoryImg": obj.get("categoryImg")
        })
        return _obj


