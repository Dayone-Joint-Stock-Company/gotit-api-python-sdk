# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gotit_api_python_sdk.models.productdefaultlinkg import PRODUCTDEFAULTLINKG
from typing import Optional, Set
from typing_extensions import Self

class REQUESTCREATEVOUCHERLINKG(BaseModel):
    """
    REQUESTCREATEVOUCHERLINKG
    """ # noqa: E501
    product_list: List[PRODUCTDEFAULTLINKG] = Field(alias="productList")
    order_name: StrictStr = Field(description="Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019", alias="orderName")
    expiry_date: StrictStr = Field(description="Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.", alias="expiryDate")
    transaction_ref_id: StrictStr = Field(description="Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'", alias="transactionRefId")
    use_otp: Optional[StrictInt] = Field(default=None, description="= 1 if the end user is required to enter a password to view the voucher. Example: 1")
    otp_type: Optional[StrictInt] = Field(default=None, description="= 1 if OTP is sent via phone number; = 7 if OTP is sent via email; = 8 if password Password is a fixed number - passed in param 'password' For example: 1")
    password: Optional[StrictStr] = Field(default=None, description="Fixed password (corresponding to otp_type=8 passed in parram 'otp_type'. For otp_type = 1 or 7 do not need to be passed integero this field). Format requirement: 6 consecutive integer characters Example: '325243'")
    receiver_name: Optional[StrictStr] = Field(default=None, description="Voucher recipient name Example: Son Tran")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number to receive the voucher. This is only the step to identify the phone number that will receive the voucher. This step has not been completed yet. Sending vouchers, sending vouchers via SMS will be a separate API section. This phone number is also used to receive OTP when the end-user opens the voucher link, respectively otp_type = 1. Request format: 10 consecutive integer characters. For example: 0909xxxxxx")
    email: Optional[StrictStr] = Field(default=None, description="Email to receive the voucher. This is just the step to identify the email address that will receive the voucher. This step does not include sending the voucher, sending the voucher via email will be a separate API section. This email address is also used to receive OTP when the end-user opens the voucher link, corresponding to otp_type = 7 . For example: son.tran@ dayone.vn")
    __properties: ClassVar[List[str]] = ["productList", "orderName", "expiryDate", "transactionRefId", "use_otp", "otp_type", "password", "receiver_name", "phone", "email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of REQUESTCREATEVOUCHERLINKG from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_list (list)
        _items = []
        if self.product_list:
            for _item_product_list in self.product_list:
                if _item_product_list:
                    _items.append(_item_product_list.to_dict())
            _dict['productList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of REQUESTCREATEVOUCHERLINKG from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productList": [PRODUCTDEFAULTLINKG.from_dict(_item) for _item in obj["productList"]] if obj.get("productList") is not None else None,
            "orderName": obj.get("orderName"),
            "expiryDate": obj.get("expiryDate"),
            "transactionRefId": obj.get("transactionRefId"),
            "use_otp": obj.get("use_otp"),
            "otp_type": obj.get("otp_type"),
            "password": obj.get("password"),
            "receiver_name": obj.get("receiver_name"),
            "phone": obj.get("phone"),
            "email": obj.get("email")
        })
        return _obj


