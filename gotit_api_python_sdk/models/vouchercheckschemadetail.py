# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gotit_api_python_sdk.models.productv import PRODUCTV
from gotit_api_python_sdk.models.storesschema import STORESSCHEMA
from typing import Optional, Set
from typing_extensions import Self

class VOUCHERCHECKSCHEMADETAIL(BaseModel):
    """
    VOUCHERCHECKSCHEMADETAIL
    """ # noqa: E501
    transaction_ref_id: Optional[StrictStr] = Field(default=None, description="TransactionRefId receive from client request", alias="transactionRefId")
    voucher_code: Optional[StrictStr] = Field(default=None, description="Voucher code. Contains 10 numbers, unique and not duplicated with any other voucher. For some brands that do not use Got It code but use integerernal code (Big C, Mobile World), the system returns the integerernal code.", alias="voucherCode")
    voucher_link: Optional[StrictStr] = Field(default=None, description="Link of voucher", alias="voucherLink")
    voucher_cover_link: Optional[StrictStr] = Field(default=None, description="Cover link of voucher.", alias="voucherCoverLink")
    voucher_serial: Optional[StrictStr] = Field(default=None, description="Is a unique code to identify voucher link v and is not valid for use. For example: V1562342ET2", alias="voucherSerial")
    group_link: Optional[StrictStr] = Field(default=None, description="https://e-stg.gotit.vn/gLsZaFRN", alias="groupLink")
    group_voucher_serial: Optional[StrictStr] = Field(default=None, description="E2V2RML6F52", alias="groupVoucherSerial")
    group_cover_link: Optional[StrictStr] = Field(default=None, description="https://e-stg.gotit.vn/gLsZaFRN", alias="groupCoverLink")
    voucher_link_code: Optional[StrictStr] = Field(default=None, description="Last 8 characters of voucher link", alias="voucherLinkCode")
    voucher_image_link: Optional[StrictStr] = Field(default=None, description="Link of voucher image. To display vouchers as images", alias="voucherImageLink")
    expiry_date: Optional[StrictStr] = Field(default=None, description="Voucher expiration date", alias="expiryDate")
    state_code: Optional[StrictInt] = Field(default=None, description="State Code", alias="stateCode")
    state_text: Optional[StrictStr] = Field(default=None, description="State Text", alias="stateText")
    used_store: Optional[List[STORESSCHEMA]] = None
    used_time: Optional[StrictStr] = Field(default=None, description="Used Time")
    used_brand: Optional[StrictStr] = Field(default=None, description="State Text")
    product: Optional[PRODUCTV] = None
    __properties: ClassVar[List[str]] = ["transactionRefId", "voucherCode", "voucherLink", "voucherCoverLink", "voucherSerial", "groupLink", "groupVoucherSerial", "groupCoverLink", "voucherLinkCode", "voucherImageLink", "expiryDate", "stateCode", "stateText", "used_store", "used_time", "used_brand", "product"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VOUCHERCHECKSCHEMADETAIL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in used_store (list)
        _items = []
        if self.used_store:
            for _item_used_store in self.used_store:
                if _item_used_store:
                    _items.append(_item_used_store.to_dict())
            _dict['used_store'] = _items
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # set to None if transaction_ref_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_ref_id is None and "transaction_ref_id" in self.model_fields_set:
            _dict['transactionRefId'] = None

        # set to None if voucher_code (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_code is None and "voucher_code" in self.model_fields_set:
            _dict['voucherCode'] = None

        # set to None if voucher_link (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_link is None and "voucher_link" in self.model_fields_set:
            _dict['voucherLink'] = None

        # set to None if voucher_cover_link (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_cover_link is None and "voucher_cover_link" in self.model_fields_set:
            _dict['voucherCoverLink'] = None

        # set to None if voucher_serial (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_serial is None and "voucher_serial" in self.model_fields_set:
            _dict['voucherSerial'] = None

        # set to None if group_link (nullable) is None
        # and model_fields_set contains the field
        if self.group_link is None and "group_link" in self.model_fields_set:
            _dict['groupLink'] = None

        # set to None if group_voucher_serial (nullable) is None
        # and model_fields_set contains the field
        if self.group_voucher_serial is None and "group_voucher_serial" in self.model_fields_set:
            _dict['groupVoucherSerial'] = None

        # set to None if group_cover_link (nullable) is None
        # and model_fields_set contains the field
        if self.group_cover_link is None and "group_cover_link" in self.model_fields_set:
            _dict['groupCoverLink'] = None

        # set to None if voucher_link_code (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_link_code is None and "voucher_link_code" in self.model_fields_set:
            _dict['voucherLinkCode'] = None

        # set to None if voucher_image_link (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_image_link is None and "voucher_image_link" in self.model_fields_set:
            _dict['voucherImageLink'] = None

        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict['expiryDate'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['stateCode'] = None

        # set to None if state_text (nullable) is None
        # and model_fields_set contains the field
        if self.state_text is None and "state_text" in self.model_fields_set:
            _dict['stateText'] = None

        # set to None if used_store (nullable) is None
        # and model_fields_set contains the field
        if self.used_store is None and "used_store" in self.model_fields_set:
            _dict['used_store'] = None

        # set to None if used_time (nullable) is None
        # and model_fields_set contains the field
        if self.used_time is None and "used_time" in self.model_fields_set:
            _dict['used_time'] = None

        # set to None if used_brand (nullable) is None
        # and model_fields_set contains the field
        if self.used_brand is None and "used_brand" in self.model_fields_set:
            _dict['used_brand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VOUCHERCHECKSCHEMADETAIL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionRefId": obj.get("transactionRefId"),
            "voucherCode": obj.get("voucherCode"),
            "voucherLink": obj.get("voucherLink"),
            "voucherCoverLink": obj.get("voucherCoverLink"),
            "voucherSerial": obj.get("voucherSerial"),
            "groupLink": obj.get("groupLink"),
            "groupVoucherSerial": obj.get("groupVoucherSerial"),
            "groupCoverLink": obj.get("groupCoverLink"),
            "voucherLinkCode": obj.get("voucherLinkCode"),
            "voucherImageLink": obj.get("voucherImageLink"),
            "expiryDate": obj.get("expiryDate"),
            "stateCode": obj.get("stateCode"),
            "stateText": obj.get("stateText"),
            "used_store": [STORESSCHEMA.from_dict(_item) for _item in obj["used_store"]] if obj.get("used_store") is not None else None,
            "used_time": obj.get("used_time"),
            "used_brand": obj.get("used_brand"),
            "product": PRODUCTV.from_dict(obj["product"]) if obj.get("product") is not None else None
        })
        return _obj


