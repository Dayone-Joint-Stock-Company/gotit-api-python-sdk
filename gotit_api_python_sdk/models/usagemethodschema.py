# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class USAGEMETHODSCHEMA(BaseModel):
    """
    USAGEMETHODSCHEMA
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Type of method used 'AT_STORE': at the store 'HOTLINE': via hot line number 'WEBSITE': via website 'FORM': via order form 'BUY_IN_WEBVIEW': via web 'BUY_IN_APP': via App")
    title: Optional[StrictStr] = Field(default=None, description="Method title")
    description: Optional[StrictStr] = Field(default=None, description="Description of the method")
    order: Optional[StrictInt] = Field(default=None, description="Number")
    link: Optional[StrictStr] = Field(default=None, description="Link to the usage method")
    phone_1: Optional[StrictStr] = Field(default=None, description="Phone number 1")
    phone_2: Optional[StrictStr] = Field(default=None, description="Phone number 2")
    __properties: ClassVar[List[str]] = ["type", "title", "description", "order", "link", "phone_1", "phone_2"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of USAGEMETHODSCHEMA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if phone_1 (nullable) is None
        # and model_fields_set contains the field
        if self.phone_1 is None and "phone_1" in self.model_fields_set:
            _dict['phone_1'] = None

        # set to None if phone_2 (nullable) is None
        # and model_fields_set contains the field
        if self.phone_2 is None and "phone_2" in self.model_fields_set:
            _dict['phone_2'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of USAGEMETHODSCHEMA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "order": obj.get("order"),
            "link": obj.get("link"),
            "phone_1": obj.get("phone_1"),
            "phone_2": obj.get("phone_2")
        })
        return _obj


