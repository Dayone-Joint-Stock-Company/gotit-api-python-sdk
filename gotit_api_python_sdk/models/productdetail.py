# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gotit_api_python_sdk.models.brandreedemschema import BRANDREEDEMSCHEMA
from gotit_api_python_sdk.models.productpriceschema import PRODUCTPRICESCHEMA
from gotit_api_python_sdk.models.storesschema import STORESSCHEMA
from typing import Optional, Set
from typing_extensions import Self

class PRODUCTDETAIL(BaseModel):
    """
    PRODUCTDETAIL
    """ # noqa: E501
    product_id: Optional[StrictInt] = Field(default=None, description="Product Id", alias="productId")
    product_nm: Optional[StrictStr] = Field(default=None, description="Product Name", alias="productNm")
    product_img: Optional[StrictStr] = Field(default=None, description="Link product image", alias="productImg")
    product_sub_img: Optional[List[Any]] = Field(default=None, description="Array of link image", alias="productSubImg")
    brand_id: Optional[StrictInt] = Field(default=None, description="Brand id", alias="brandId")
    brand_nm: Optional[StrictStr] = Field(default=None, description="Brand name", alias="brandNm")
    product_type: Optional[StrictStr] = Field(default=None, description="c (cash) hoáº·c i (item)", alias="productType")
    brand_name_slug: Optional[StrictStr] = Field(default=None, description="Slug of brand", alias="brandNameSlug")
    brand_phone: Optional[StrictStr] = Field(default=None, description="Phone of brand", alias="brandPhone")
    brand_address: Optional[StrictStr] = Field(default=None, description="Address of brand", alias="brandAddress")
    brand_desc: Optional[StrictStr] = Field(default=None, description="Description of brand", alias="brandDesc")
    brand_service_guide: Optional[StrictStr] = Field(default=None, description="T&C of brand", alias="brandServiceGuide")
    service_guide: Optional[StrictStr] = Field(default=None, description="T&C of product", alias="serviceGuide")
    brand_logo: Optional[StrictStr] = Field(default=None, description="Link to brand logo image", alias="brandLogo")
    link: Optional[StrictStr] = None
    prices: Optional[List[PRODUCTPRICESCHEMA]] = None
    name_slug: Optional[StrictStr] = Field(default=None, description="Slug of product", alias="nameSlug")
    product_desc: Optional[StrictStr] = Field(default=None, description="Product Description", alias="productDesc")
    product_short_desc: Optional[StrictStr] = Field(default=None, description="Product Short Description", alias="productShortDesc")
    terms: Optional[StrictStr] = Field(default=None, description="Terms of use")
    category_id: Optional[StrictInt] = Field(default=None, description="Category Id", alias="categoryId")
    category_nm: Optional[StrictStr] = Field(default=None, description="Category Name", alias="categoryNm")
    category_img: Optional[StrictStr] = Field(default=None, description="Category Image", alias="categoryImg")
    brand_redeem: Optional[List[BRANDREEDEMSCHEMA]] = Field(default=None, alias="brandRedeem")
    store_list: Optional[List[STORESSCHEMA]] = Field(default=None, alias="storeList")
    __properties: ClassVar[List[str]] = ["productId", "productNm", "productImg", "productSubImg", "brandId", "brandNm", "productType", "brandNameSlug", "brandPhone", "brandAddress", "brandDesc", "brandServiceGuide", "serviceGuide", "brandLogo", "link", "prices", "nameSlug", "productDesc", "productShortDesc", "terms", "categoryId", "categoryNm", "categoryImg", "brandRedeem", "storeList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PRODUCTDETAIL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item_prices in self.prices:
                if _item_prices:
                    _items.append(_item_prices.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in brand_redeem (list)
        _items = []
        if self.brand_redeem:
            for _item_brand_redeem in self.brand_redeem:
                if _item_brand_redeem:
                    _items.append(_item_brand_redeem.to_dict())
            _dict['brandRedeem'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in store_list (list)
        _items = []
        if self.store_list:
            for _item_store_list in self.store_list:
                if _item_store_list:
                    _items.append(_item_store_list.to_dict())
            _dict['storeList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PRODUCTDETAIL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productId": obj.get("productId"),
            "productNm": obj.get("productNm"),
            "productImg": obj.get("productImg"),
            "productSubImg": obj.get("productSubImg"),
            "brandId": obj.get("brandId"),
            "brandNm": obj.get("brandNm"),
            "productType": obj.get("productType"),
            "brandNameSlug": obj.get("brandNameSlug"),
            "brandPhone": obj.get("brandPhone"),
            "brandAddress": obj.get("brandAddress"),
            "brandDesc": obj.get("brandDesc"),
            "brandServiceGuide": obj.get("brandServiceGuide"),
            "serviceGuide": obj.get("serviceGuide"),
            "brandLogo": obj.get("brandLogo"),
            "link": obj.get("link"),
            "prices": [PRODUCTPRICESCHEMA.from_dict(_item) for _item in obj["prices"]] if obj.get("prices") is not None else None,
            "nameSlug": obj.get("nameSlug"),
            "productDesc": obj.get("productDesc"),
            "productShortDesc": obj.get("productShortDesc"),
            "terms": obj.get("terms"),
            "categoryId": obj.get("categoryId"),
            "categoryNm": obj.get("categoryNm"),
            "categoryImg": obj.get("categoryImg"),
            "brandRedeem": [BRANDREEDEMSCHEMA.from_dict(_item) for _item in obj["brandRedeem"]] if obj.get("brandRedeem") is not None else None,
            "storeList": [STORESSCHEMA.from_dict(_item) for _item in obj["storeList"]] if obj.get("storeList") is not None else None
        })
        return _obj


