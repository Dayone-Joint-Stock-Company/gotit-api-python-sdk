"""
    Sample API

    Technical document APIs for API Version 4.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.httpbadrequest import HTTPBADREQUEST
from openapi_client.model.httpinternalservererror import HTTPINTERNALSERVERERROR
from openapi_client.model.httpnotfound import HTTPNOTFOUND
from openapi_client.model.httpunauthorized import HTTPUNAUTHORIZED
from openapi_client.model.requestcheckstatuszns import REQUESTCHECKSTATUSZNS
from openapi_client.model.requestsendvoucherbyemail import REQUESTSENDVOUCHERBYEMAIL
from openapi_client.model.requestsendvoucherbysms import REQUESTSENDVOUCHERBYSMS
from openapi_client.model.requestsendvoucherbyzns import REQUESTSENDVOUCHERBYZNS
from openapi_client.model.vouchercheckznsresponse import VOUCHERCHECKZNSRESPONSE
from openapi_client.model.vouchersendemailresponse import VOUCHERSENDEMAILRESPONSE
from openapi_client.model.vouchersendsmsresponse import VOUCHERSENDSMSRESPONSE
from openapi_client.model.vouchersendznsresponse import VOUCHERSENDZNSRESPONSE


class VoucherSendMethodApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.check_status_zns_endpoint = _Endpoint(
            settings={
                'response_type': (VOUCHERCHECKZNSRESPONSE,),
                'auth': [],
                'endpoint_path': '/api/v4.0/vouchers/send/zns/check',
                'operation_id': 'check_status_zns',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_gi_authorization',
                    'requestcheckstatuszns',
                ],
                'required': [
                    'x_gi_authorization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_gi_authorization':
                        (str,),
                    'requestcheckstatuszns':
                        (REQUESTCHECKSTATUSZNS,),
                },
                'attribute_map': {
                    'x_gi_authorization': 'X-GI-Authorization',
                },
                'location_map': {
                    'x_gi_authorization': 'header',
                    'requestcheckstatuszns': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_voucher_by_email_endpoint = _Endpoint(
            settings={
                'response_type': (VOUCHERSENDEMAILRESPONSE,),
                'auth': [],
                'endpoint_path': '/api/v4.0/vouchers/send/email',
                'operation_id': 'send_voucher_by_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_gi_authorization',
                    'requestsendvoucherbyemail',
                ],
                'required': [
                    'x_gi_authorization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_gi_authorization':
                        (str,),
                    'requestsendvoucherbyemail':
                        (REQUESTSENDVOUCHERBYEMAIL,),
                },
                'attribute_map': {
                    'x_gi_authorization': 'X-GI-Authorization',
                },
                'location_map': {
                    'x_gi_authorization': 'header',
                    'requestsendvoucherbyemail': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_voucher_by_sms_endpoint = _Endpoint(
            settings={
                'response_type': (VOUCHERSENDSMSRESPONSE,),
                'auth': [],
                'endpoint_path': '/api/v4.0/vouchers/send/sms',
                'operation_id': 'send_voucher_by_sms',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_gi_authorization',
                    'requestsendvoucherbysms',
                ],
                'required': [
                    'x_gi_authorization',
                    'requestsendvoucherbysms',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_gi_authorization':
                        (str,),
                    'requestsendvoucherbysms':
                        (REQUESTSENDVOUCHERBYSMS,),
                },
                'attribute_map': {
                    'x_gi_authorization': 'X-GI-Authorization',
                },
                'location_map': {
                    'x_gi_authorization': 'header',
                    'requestsendvoucherbysms': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_voucher_by_zns_endpoint = _Endpoint(
            settings={
                'response_type': (VOUCHERSENDZNSRESPONSE,),
                'auth': [],
                'endpoint_path': '/api/v4.0/vouchers/send/zns',
                'operation_id': 'send_voucher_by_zns',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_gi_authorization',
                    'requestsendvoucherbyzns',
                ],
                'required': [
                    'x_gi_authorization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_gi_authorization':
                        (str,),
                    'requestsendvoucherbyzns':
                        (REQUESTSENDVOUCHERBYZNS,),
                },
                'attribute_map': {
                    'x_gi_authorization': 'X-GI-Authorization',
                },
                'location_map': {
                    'x_gi_authorization': 'header',
                    'requestsendvoucherbyzns': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def check_status_zns(
        self,
        x_gi_authorization,
        **kwargs
    ):
        """Check status zns  # noqa: E501

        Check status zns  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_status_zns(x_gi_authorization, async_req=True)
        >>> result = thread.get()

        Args:
            x_gi_authorization (str): Authorization

        Keyword Args:
            requestcheckstatuszns (REQUESTCHECKSTATUSZNS): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VOUCHERCHECKZNSRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_gi_authorization'] = \
            x_gi_authorization
        return self.check_status_zns_endpoint.call_with_http_info(**kwargs)

    def send_voucher_by_email(
        self,
        x_gi_authorization,
        **kwargs
    ):
        """Send voucher by mail  # noqa: E501

        Send voucher by mail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_voucher_by_email(x_gi_authorization, async_req=True)
        >>> result = thread.get()

        Args:
            x_gi_authorization (str): Authorization

        Keyword Args:
            requestsendvoucherbyemail (REQUESTSENDVOUCHERBYEMAIL): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VOUCHERSENDEMAILRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_gi_authorization'] = \
            x_gi_authorization
        return self.send_voucher_by_email_endpoint.call_with_http_info(**kwargs)

    def send_voucher_by_sms(
        self,
        x_gi_authorization,
        requestsendvoucherbysms,
        **kwargs
    ):
        """Send voucher by sms  # noqa: E501

        Send voucher by sms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_voucher_by_sms(x_gi_authorization, requestsendvoucherbysms, async_req=True)
        >>> result = thread.get()

        Args:
            x_gi_authorization (str): Authorization
            requestsendvoucherbysms (REQUESTSENDVOUCHERBYSMS):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VOUCHERSENDSMSRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_gi_authorization'] = \
            x_gi_authorization
        kwargs['requestsendvoucherbysms'] = \
            requestsendvoucherbysms
        return self.send_voucher_by_sms_endpoint.call_with_http_info(**kwargs)

    def send_voucher_by_zns(
        self,
        x_gi_authorization,
        **kwargs
    ):
        """Send voucher by zns  # noqa: E501

        Send voucher by zns  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_voucher_by_zns(x_gi_authorization, async_req=True)
        >>> result = thread.get()

        Args:
            x_gi_authorization (str): Authorization

        Keyword Args:
            requestsendvoucherbyzns (REQUESTSENDVOUCHERBYZNS): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VOUCHERSENDZNSRESPONSE
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['x_gi_authorization'] = \
            x_gi_authorization
        return self.send_voucher_by_zns_endpoint.call_with_http_info(**kwargs)

