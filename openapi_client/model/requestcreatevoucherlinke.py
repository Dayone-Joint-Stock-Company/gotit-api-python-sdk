"""
    Sample API

    Technical document APIs for API Version 4.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError



class REQUESTCREATEVOUCHERLINKE(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'order_name': (str,),  # noqa: E501
            'transaction_ref_id': (str,),  # noqa: E501
            'amount': (int,),  # noqa: E501
            'expiry_date': (str,),  # noqa: E501
            'use_otp': (int,),  # noqa: E501
            'signature': (str,),  # noqa: E501
            'product_id': (int,),  # noqa: E501
            'otp_type': (int,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'receiver_name': (str,),  # noqa: E501
            'phone': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'order_name': 'orderName',  # noqa: E501
        'transaction_ref_id': 'transactionRefId',  # noqa: E501
        'amount': 'amount',  # noqa: E501
        'expiry_date': 'expiryDate',  # noqa: E501
        'use_otp': 'use_otp',  # noqa: E501
        'signature': 'signature',  # noqa: E501
        'product_id': 'productId',  # noqa: E501
        'otp_type': 'otp_type',  # noqa: E501
        'password': 'password',  # noqa: E501
        'receiver_name': 'receiver_name',  # noqa: E501
        'phone': 'phone',  # noqa: E501
        'email': 'email',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, order_name, transaction_ref_id, amount, expiry_date, use_otp, signature, *args, **kwargs):  # noqa: E501
        """REQUESTCREATEVOUCHERLINKE - a model defined in OpenAPI

        Args:
            order_name (str): Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019
            transaction_ref_id (str): Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'
            amount (int): + Voucher value. Ensures the following conditions: + Is a multiple of 1000 + Is within the price range minimum - maximum value that the partner and Got It have agreed upon.
            expiry_date (str): Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.
            use_otp (int): = 1 if the end user is required to enter a password to view the voucher. Example: 1
            signature (str): RSA encryption, used for client authentication

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            product_id (int): + Product code. Specify the template displayed on the voucher (list of Categories and Brands). + If no transmission will use Got It's default productId. [optional]  # noqa: E501
            otp_type (int): = 1 if OTP is sent via phone number; = 7 if OTP is sent via email; = 8 if password Password is a fixed number - passed in param 'password' For example: 1. [optional]  # noqa: E501
            password (str): Fixed password (corresponding to otp_type=8 passed in parram 'otp_type'. For otp_type = 1 or 7 do not need to be passed integero this field). Format requirement: 6 consecutive integer characters Example: '325243'. [optional]  # noqa: E501
            receiver_name (str): Voucher recipient name Example: Son Tran. [optional]  # noqa: E501
            phone (str): Phone number to receive the voucher. This is only the step to identify the phone number that will receive the voucher. This step has not been completed yet. Sending vouchers, sending vouchers via SMS will be a separate API section. This phone number is also used to receive OTP when the end-user opens the voucher link, respectively otp_type = 1. Request format: 10 consecutive integer characters. For example: 0909xxxxxx. [optional]  # noqa: E501
            email (str): Email to receive the voucher. This is just the step to identify the email address that will receive the voucher. This step does not include sending the voucher, sending the voucher via email will be a separate API section. This email address is also used to receive OTP when the end-user opens the voucher link, corresponding to otp_type = 7 . For example: son.tran@ dayone.vn. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.order_name = order_name
        self.transaction_ref_id = transaction_ref_id
        self.amount = amount
        self.expiry_date = expiry_date
        self.use_otp = use_otp
        self.signature = signature
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, order_name, transaction_ref_id, amount, expiry_date, use_otp, signature, *args, **kwargs):  # noqa: E501
        """REQUESTCREATEVOUCHERLINKE - a model defined in OpenAPI

        Args:
            order_name (str): Please don't use the voucher recipient or the content changes daily or frequently. Owl French: Customers specified name + [Month] + [Year] Example: Got It Promotion - Jul 2019
            transaction_ref_id (str): Transaction code receive from the customer request, used for comparison and reconciliation. If the transaction fails, after 5 mintegerues, you can use this transmitted transactionRefID to request again. Maximum 255 characters. Format of transactionRefId: prefix + '_' + character string In which: + prefix: string of 06 integer characters provided by Got It. + character string: string actively generated by clients Example: prefix: '000742' character string: '20220126-6f823f2e' => transactionRefId: '000742_20220126-6f823f2e'
            amount (int): + Voucher value. Ensures the following conditions: + Is a multiple of 1000 + Is within the price range minimum - maximum value that the partner and Got It have agreed upon.
            expiry_date (str): Voucher expiration date. Syntax 'YYYY-MM-DD'. The expiration date is specified specified in the contract between the partner and Got It, usually 3 months from the release date, maximum 12 months.
            use_otp (int): = 1 if the end user is required to enter a password to view the voucher. Example: 1
            signature (str): RSA encryption, used for client authentication

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            product_id (int): + Product code. Specify the template displayed on the voucher (list of Categories and Brands). + If no transmission will use Got It's default productId. [optional]  # noqa: E501
            otp_type (int): = 1 if OTP is sent via phone number; = 7 if OTP is sent via email; = 8 if password Password is a fixed number - passed in param 'password' For example: 1. [optional]  # noqa: E501
            password (str): Fixed password (corresponding to otp_type=8 passed in parram 'otp_type'. For otp_type = 1 or 7 do not need to be passed integero this field). Format requirement: 6 consecutive integer characters Example: '325243'. [optional]  # noqa: E501
            receiver_name (str): Voucher recipient name Example: Son Tran. [optional]  # noqa: E501
            phone (str): Phone number to receive the voucher. This is only the step to identify the phone number that will receive the voucher. This step has not been completed yet. Sending vouchers, sending vouchers via SMS will be a separate API section. This phone number is also used to receive OTP when the end-user opens the voucher link, respectively otp_type = 1. Request format: 10 consecutive integer characters. For example: 0909xxxxxx. [optional]  # noqa: E501
            email (str): Email to receive the voucher. This is just the step to identify the email address that will receive the voucher. This step does not include sending the voucher, sending the voucher via email will be a separate API section. This email address is also used to receive OTP when the end-user opens the voucher link, corresponding to otp_type = 7 . For example: son.tran@ dayone.vn. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.order_name = order_name
        self.transaction_ref_id = transaction_ref_id
        self.amount = amount
        self.expiry_date = expiry_date
        self.use_otp = use_otp
        self.signature = signature
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
