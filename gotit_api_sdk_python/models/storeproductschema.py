# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class STOREPRODUCTSCHEMA(BaseModel):
    """
    STOREPRODUCTSCHEMA
    """ # noqa: E501
    store_id: Optional[StrictInt] = Field(default=None, description="Store Id", alias="storeId")
    store_nm: Optional[StrictStr] = Field(default=None, description="Store Name", alias="storeNm")
    store_addr: Optional[StrictStr] = Field(default=None, description="Store Address", alias="storeAddr")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lat location on Google maps")
    long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Long location on Google maps")
    phone: Optional[StrictStr] = Field(default=None, description="Store Phone")
    city_id: Optional[StrictInt] = Field(default=None, description="City code (Got It identifier)")
    city: Optional[StrictStr] = Field(default=None, description="City name")
    dist_id: Optional[StrictInt] = Field(default=None, description="District code (Got It identifier)")
    district: Optional[StrictStr] = Field(default=None, description="District name")
    __properties: ClassVar[List[str]] = ["storeId", "storeNm", "storeAddr", "lat", "long", "phone", "city_id", "city", "dist_id", "district"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of STOREPRODUCTSCHEMA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if store_id (nullable) is None
        # and model_fields_set contains the field
        if self.store_id is None and "store_id" in self.model_fields_set:
            _dict['storeId'] = None

        # set to None if store_nm (nullable) is None
        # and model_fields_set contains the field
        if self.store_nm is None and "store_nm" in self.model_fields_set:
            _dict['storeNm'] = None

        # set to None if store_addr (nullable) is None
        # and model_fields_set contains the field
        if self.store_addr is None and "store_addr" in self.model_fields_set:
            _dict['storeAddr'] = None

        # set to None if lat (nullable) is None
        # and model_fields_set contains the field
        if self.lat is None and "lat" in self.model_fields_set:
            _dict['lat'] = None

        # set to None if long (nullable) is None
        # and model_fields_set contains the field
        if self.long is None and "long" in self.model_fields_set:
            _dict['long'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if city_id (nullable) is None
        # and model_fields_set contains the field
        if self.city_id is None and "city_id" in self.model_fields_set:
            _dict['city_id'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if dist_id (nullable) is None
        # and model_fields_set contains the field
        if self.dist_id is None and "dist_id" in self.model_fields_set:
            _dict['dist_id'] = None

        # set to None if district (nullable) is None
        # and model_fields_set contains the field
        if self.district is None and "district" in self.model_fields_set:
            _dict['district'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of STOREPRODUCTSCHEMA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "storeId": obj.get("storeId"),
            "storeNm": obj.get("storeNm"),
            "storeAddr": obj.get("storeAddr"),
            "lat": obj.get("lat"),
            "long": obj.get("long"),
            "phone": obj.get("phone"),
            "city_id": obj.get("city_id"),
            "city": obj.get("city"),
            "dist_id": obj.get("dist_id"),
            "district": obj.get("district")
        })
        return _obj


