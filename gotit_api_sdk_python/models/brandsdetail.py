# coding: utf-8

"""
    Sample API

    Technical document APIs for API Version 4.

    The version of the OpenAPI document: 4.0.0
    Contact: quang.huynh@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gotit_api_sdk_python.models.storesschema import STORESSCHEMA
from gotit_api_sdk_python.models.usagemethodschema import USAGEMETHODSCHEMA
from typing import Optional, Set
from typing_extensions import Self

class BRANDSDETAIL(BaseModel):
    """
    BRANDSDETAIL
    """ # noqa: E501
    brand_id: Optional[StrictInt] = Field(default=None, description="Brand id", alias="brandId")
    brand_nm: Optional[StrictStr] = Field(default=None, description="Brand name", alias="brandNm")
    brand_logo: Optional[StrictStr] = Field(default=None, description="Link to brand logo image", alias="brandLogo")
    slug: Optional[StrictStr] = Field(default=None, description="Brand name used for URL")
    short_desc: Optional[Any] = Field(default=None, description="Brand short description", alias="shortDesc")
    description: Optional[StrictStr] = None
    category_id: Optional[List[Any]] = Field(default=None, description="Array containing a list of Categories codes to which the Brand belongs", alias="categoryID")
    order: Optional[StrictInt] = Field(default=None, description="The serial number displays the brand")
    service_guide: Optional[Any] = Field(default=None, description="Describe the brand's terms of reference (T&C). HTML format", alias="serviceGuide")
    stores: Optional[List[STORESSCHEMA]] = None
    usage_methods: Optional[List[USAGEMETHODSCHEMA]] = Field(default=None, description="Information on the brand's applicable channels", alias="usageMethods")
    __properties: ClassVar[List[str]] = ["brandId", "brandNm", "brandLogo", "slug", "shortDesc", "description", "categoryID", "order", "serviceGuide", "stores", "usageMethods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BRANDSDETAIL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stores (list)
        _items = []
        if self.stores:
            for _item_stores in self.stores:
                if _item_stores:
                    _items.append(_item_stores.to_dict())
            _dict['stores'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in usage_methods (list)
        _items = []
        if self.usage_methods:
            for _item_usage_methods in self.usage_methods:
                if _item_usage_methods:
                    _items.append(_item_usage_methods.to_dict())
            _dict['usageMethods'] = _items
        # set to None if brand_id (nullable) is None
        # and model_fields_set contains the field
        if self.brand_id is None and "brand_id" in self.model_fields_set:
            _dict['brandId'] = None

        # set to None if brand_nm (nullable) is None
        # and model_fields_set contains the field
        if self.brand_nm is None and "brand_nm" in self.model_fields_set:
            _dict['brandNm'] = None

        # set to None if brand_logo (nullable) is None
        # and model_fields_set contains the field
        if self.brand_logo is None and "brand_logo" in self.model_fields_set:
            _dict['brandLogo'] = None

        # set to None if slug (nullable) is None
        # and model_fields_set contains the field
        if self.slug is None and "slug" in self.model_fields_set:
            _dict['slug'] = None

        # set to None if short_desc (nullable) is None
        # and model_fields_set contains the field
        if self.short_desc is None and "short_desc" in self.model_fields_set:
            _dict['shortDesc'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryID'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if service_guide (nullable) is None
        # and model_fields_set contains the field
        if self.service_guide is None and "service_guide" in self.model_fields_set:
            _dict['serviceGuide'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BRANDSDETAIL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandId": obj.get("brandId"),
            "brandNm": obj.get("brandNm"),
            "brandLogo": obj.get("brandLogo"),
            "slug": obj.get("slug"),
            "shortDesc": obj.get("shortDesc"),
            "description": obj.get("description"),
            "categoryID": obj.get("categoryID"),
            "order": obj.get("order"),
            "serviceGuide": obj.get("serviceGuide"),
            "stores": [STORESSCHEMA.from_dict(_item) for _item in obj["stores"]] if obj.get("stores") is not None else None,
            "usageMethods": [USAGEMETHODSCHEMA.from_dict(_item) for _item in obj["usageMethods"]] if obj.get("usageMethods") is not None else None
        })
        return _obj


